#!/bin/bash

# Script de d√©ploiement pour Kinshasa-Alerte
# Usage: ./deploy.sh [production|staging]

set -e

# Configuration
APP_NAME="kin-alerte"
DEPLOY_ENV=${1:-production}
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/var/backups/kin-alerte"
LOG_DIR="/var/log/kin-alerte"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rification des pr√©requis
check_prerequisites() {
    log "V√©rification des pr√©requis..."
    
    # V√©rifier Node.js
    if ! command -v node &> /dev/null; then
        error "Node.js n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier npm
    if ! command -v npm &> /dev/null; then
        error "npm n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier PM2
    if ! command -v pm2 &> /dev/null; then
        warning "PM2 n'est pas install√©, installation..."
        npm install -g pm2
    fi
    
    success "Pr√©requis v√©rifi√©s"
}

# Sauvegarde de l'ancienne version
backup_current_version() {
    log "Sauvegarde de la version actuelle..."
    
    if [ -d "dist" ]; then
        mkdir -p "$BACKUP_DIR"
        tar -czf "$BACKUP_DIR/backup_${TIMESTAMP}.tar.gz" dist/
        success "Sauvegarde cr√©√©e: backup_${TIMESTAMP}.tar.gz"
    else
        warning "Aucune version pr√©c√©dente √† sauvegarder"
    fi
}

# Installation des d√©pendances
install_dependencies() {
    log "Installation des d√©pendances..."
    npm ci --production=false
    success "D√©pendances install√©es"
}

# Build de l'application
build_application() {
    log "Build de l'application..."
    
    # Nettoyer le dossier dist
    rm -rf dist/
    
    # Build
    npm run build
    
    if [ -d "dist" ]; then
        success "Build r√©ussi"
    else
        error "√âchec du build"
        exit 1
    fi
}

# Tests de production
run_tests() {
    log "Ex√©cution des tests..."
    
    # Tests de build
    if npm run build --dry-run &> /dev/null; then
        success "Tests de build pass√©s"
    else
        warning "Tests de build √©chou√©s, mais continuation..."
    fi
}

# D√©ploiement avec PM2
deploy_with_pm2() {
    log "D√©ploiement avec PM2..."
    
    # Arr√™ter l'application si elle tourne
    if pm2 list | grep -q "$APP_NAME"; then
        log "Arr√™t de l'application existante..."
        pm2 stop "$APP_NAME"
    fi
    
    # D√©marrer l'application
    pm2 start ecosystem.config.js --env "$DEPLOY_ENV"
    
    # Sauvegarder la configuration PM2
    pm2 save
    
    success "Application d√©ploy√©e avec PM2"
}

# V√©rification du d√©ploiement
verify_deployment() {
    log "V√©rification du d√©ploiement..."
    
    # Attendre que l'application d√©marre
    sleep 5
    
    # V√©rifier le statut PM2
    if pm2 list | grep -q "$APP_NAME.*online"; then
        success "Application en ligne"
    else
        error "Application hors ligne"
        pm2 logs "$APP_NAME" --lines 20
        exit 1
    fi
    
    # Test de sant√© (si configur√©)
    if curl -f http://localhost:8080/health &> /dev/null; then
        success "Test de sant√© r√©ussi"
    else
        warning "Test de sant√© √©chou√© (peut √™tre normal si non configur√©)"
    fi
}

# Nettoyage des anciennes sauvegardes
cleanup_old_backups() {
    log "Nettoyage des anciennes sauvegardes..."
    
    # Garder seulement les 5 derni√®res sauvegardes
    if [ -d "$BACKUP_DIR" ]; then
        cd "$BACKUP_DIR"
        ls -t *.tar.gz | tail -n +6 | xargs -r rm
        success "Anciennes sauvegardes nettoy√©es"
    fi
}

# Affichage des informations de d√©ploiement
show_deployment_info() {
    log "Informations de d√©ploiement:"
    echo "  - Environnement: $DEPLOY_ENV"
    echo "  - Timestamp: $TIMESTAMP"
    echo "  - Version Node.js: $(node --version)"
    echo "  - Version npm: $(npm --version)"
    echo "  - Statut PM2:"
    pm2 list | grep "$APP_NAME" || echo "    Application non trouv√©e"
}

# Fonction principale
main() {
    log "üöÄ D√©but du d√©ploiement de $APP_NAME"
    
    check_prerequisites
    backup_current_version
    install_dependencies
    build_application
    run_tests
    deploy_with_pm2
    verify_deployment
    cleanup_old_backups
    show_deployment_info
    
    success "üéâ D√©ploiement termin√© avec succ√®s!"
    
    log "Commandes utiles:"
    echo "  - Voir les logs: pm2 logs $APP_NAME"
    echo "  - Monitorer: pm2 monit"
    echo "  - Red√©marrer: pm2 restart $APP_NAME"
    echo "  - Arr√™ter: pm2 stop $APP_NAME"
}

# Gestion des erreurs
trap 'error "D√©ploiement interrompu"; exit 1' INT TERM

# Ex√©cution
main "$@" 